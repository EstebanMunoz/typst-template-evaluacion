%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html
name: Cython
comment: |
  Copyright (C) 2013 - 2017 Peter Varo
          <http://github.com/petervaro/python>

          This program is free software: you can redistribute it
          and/or modify it under the terms of the GNU General
          Public License as published by the Free Software
          Foundation, either version 3 of the License, or (at your
          option) any later version.

          This program is distributed in the hope that it will be
          useful, but WITHOUT ANY WARRANTY; without even the
          implied warranty of MERCHANTABILITY or FITNESS FOR A
          PARTICULAR PURPOSE. See the GNU General Public License
          for more details.

          You should have received a copy of the GNU General Public
          License along with this program, most likely a file in
          the root directory, called "LICENSE". If not, see
          <http://www.gnu.org/licenses>.
file_extensions:
  - pyx
  - pxi
  - pxd
first_line_match: '^#!/.*\bpython[\d.-]*\b'
scope: source.cython
contexts:
  main:
    - include: comment
    - match: '\b0b[01]+'
      scope: constant.numeric.integer.binary.cython
    - match: \b0x\h+
      scope: constant.numeric.integer.hexadecimal.cython
    - match: '\b0o[0-7]+'
      scope: constant.numeric.integer.octal.cython
    - match: '(?<=\W|^)\.\d+([eE][+-]?\d+)?[jJ]?'
      scope: constant.numeric.float_and_complex.decimal.floatnumber.cython
    - match: '\d+\.(\d*([eE][+-]?\d+)?)?[jJ]?(?=\W)'
      scope: constant.numeric.float_and_complex.decimal.pointfloat.cython
    - match: '(?<![\.\d])\d+[eE][+-]?\d+[jJ]?'
      scope: constant.numeric.float_and_complex.decimal.exponent.cython
    - match: '\b(?<!\.)([1-9]\d*|0)[jJ]?'
      scope: constant.numeric.integer_and_complex.decimal.cython
    - match: \b(global|nonlocal|gil|nogil|extern|api|public|readonly|const(\svolatile)?|inline)\b
      scope: storage.modifier.declaration.cython
    - match: \b(async|await)\b
      scope: storage.modifier.coroutine.cython
    - match: \b(cimport|include|extern|import|from)\b
      scope: keyword.control.import_and_import_from.cython
    - match: \b(elif|else|except|finally|for|if|try|while|with|break|continue|pass|raise|return|yield|IF|ELIF|ELSE|DEF)\b
      scope: keyword.control.flow_block_delimiters.cython
    - match: \b(and|in|is|not|or)\b
      scope: keyword.operator.bool.logical.cython
    - match: \b(as|assert|by|del)\b
      scope: keyword.other.cython
    - match: <=|>=|==|<|>|!=
      scope: keyword.operator.comparison.cython
    - match: \+=|-=|\*=|/=|//=|%=|&=|\|=|\^=|<<=|>>=|\*\*=
      scope: keyword.operator.assignment.augmented.cython
    - match: \+|-|\*|\*\*|/|//|%|<<|>>|&|\||\^|~
      scope: keyword.operator.arithmetic.cython
    - match: '=|->'
      scope: keyword.operator.value_and_annotation_assignment.cython
    - match: \?
      scope: keyword.operator.type_test.cython
    - match: '^\s*(cdef\s+)?(class)\s+(?=[a-zA-Z_]\w*(\s*\()?)'
      captures:
        1: storage.type.class.definition.cython
        2: storage.type.class.cython
      push:
        - meta_scope: meta.class.cython
        - match: '(\)?\s*:|\s+([\w#\s:]+))'
          captures:
            3: invalid.illegal.missing_section_begin.cython
          pop: true
        - include: class_entity_name
        - include: class_inheritance
    - match: '^\s*(async\s)?\s*((cp?)?def)\s+(?=[a-zA-Z_]\w*\s*\()'
      captures:
        1: storage.modifier.coroutine.cython
        2: storage.type.function.cython
      push:
        - meta_scope: meta.function.cython
        - match: (\s*:|\n+)
          captures:
            2: invalid.illegal.missing_section_begin.cython
          pop: true
        - include: function_entity_name
        - include: function_arguments
        - match: \)\s*(nogil)\s*
          captures:
            1: storage.modifier.declaration.cython
          push:
            - match: \s*((->)|:|\n+)
              pop: true
        - include: function_annotation
    - match: \b(lambda)\b
      captures:
        1: storage.type.function.anonymous.cython
      push:
        - meta_scope: meta.function.anonymous.cython
        - match: ':'
          pop: true
        - match: \s+
          push:
            - match: (?=:)
              pop: true
            - match: '\b([a-zA-Z_]\w*)\s*(=)'
              captures:
                1: variable.parameter.function.cython
                2: keyword.operator.assignment.cython
              push:
                - match: (?=,|:)
                  pop: true
                - include: main
            - match: '\b[a-zA-Z_]\w*'
              scope: variable.parameter.function.cython
    - match: '^\s*(@\s*[a-zA-Z_]\w*(\.[a-zA-Z_]\w*)*)\s*\('
      captures:
        1: support.function.decorator.cython
      push:
        - meta_scope: meta.function.decorator.with_arguments.cython
        - match: \)
          pop: true
        - include: keyword_arguments
        - include: main
    - match: '^\s*(@\s*[a-zA-Z_]\w*(\.[a-zA-Z_]\w*)*)'
      captures:
        1: support.function.decorator.cython
      push:
        - meta_scope: meta.function.decorator.without_arguments.cython
        - match: (?=\s|$\n?|#)
          pop: true
    - match: '@'
      scope: keyword.operator.arithmetic.cython
    - match: \b(NULL|None|True|False|Ellipsis|NotImplemented|UNAME_SYSNAME|UNAME_NODENAME|UNAME_RELEASE|UNAME_VERSION|UNAME_MACHINE|EXIT_FAILURE|EXIT_SUCCESS|RAND_MAX)\b
      scope: constant.language.word_like.cython
    - match: (?<=\W|^)\.\.\.(?=\W|$)
      scope: constant.language.symbol_like.cython
    - match: \b((c(p|type)?)?def|lambda)\b
      scope: storage.type.function.cython
    - match: \b(class)\b
      scope: storage.type.class.cython
    - include: builtin_types
    - include: c_types
    - include: builtin_functions
    - include: builtin_exceptions
    - include: magic_function_names
    - include: magic_variable_names
    - include: line_continuation
    - include: language_variables
    - match: '\['
      push:
        - meta_scope: meta.structure.list.cython
        - match: '\]'
          pop: true
        - match: '(?<=\[|,)\s*(?![\],])'
          push:
            - match: '\s*(?:,|(?=\]))'
              pop: true
            - include: main
    - match: '\{'
      push:
        - meta_scope: meta.structure.dictionary.cython
        - match: '\}'
          pop: true
        - match: '(?<=\{|,|^)\s*(?![,}])'
          push:
            - match: '\s*(?:(?=\})|:)'
              pop: true
            - include: main
        - match: (?<=:|^)\s*
          push:
            - match: '\s*(?:(?=\})|,)'
              pop: true
            - include: main
    - match: (?<=,|;|=|\+|-|\*|/|\||:|<|>|~|%|\^|\\)\s*\(
      push:
        - meta_scope: meta.structure.group.cython
        - match: \)
          pop: true
        - include: main
    - match: '(?<!:|,|;|\[|\{|\}|=|\+|-|\*|/|\||<|>|~|%|\^|\\|\n)\s*\('
      push:
        - meta_scope: meta.function_call.cython
        - match: \)
          pop: true
        - include: keyword_arguments
        - include: main
    - include: f_string_quoted
    - include: string_quoted_regex
    - include: string_quoted
  comment:
    - match: '#.*$\n?'
      scope: comment.line.hashmark.cython
  builtin_exceptions:
    - match: (?<!\.)\b((Arithmetic|Buffer|Lookup|Assertion|Attribute|EOF|FloatingPoint|Import|Index|Key|Memory|Name|NotImplemented|OS|Overflow|Reference|Runtime|Syntax|Indentation|Tab|System|Type|UnboundLocal|Unicode|Unicode(Encode|Decode|Translate)?|Value|ZeroDivision|Environment|IO|VMS|Windows|BlockingIO|ChildProcess|BrokenPipe|Connection(Aborted|Refused|Reset)?|FileExists|FileNotFound|Interrupted|(Is|Not)ADirectory|Permission|ProcessLookup|Timeout)Error|(User|Deprecation|PendingDeprecation|Syntax|Runtime|Future|Import|Bytes|Resource)Warning|(Base)?Exception|(Generator|System)Exit|KeyboardInterrupt|Stop(Async)?Iteration|Warning)\b
      scope: support.type.exception.cython
  builtin_functions:
    - match: (?<!\.)\b(__import__|abort|(c|m|re)alloc|(ll?)?abs|all|any|ascii|bin|bsearch|callable|chr|compile|delattr|dir|(ll?)?div|divmod|eval|exec|(_|at)?exit|filter|format|free|getattr|getenv|globals|hasattr|hash|help|hex|id|input|isinstance|issubclass|iter|len|locals|map|max|min|next|oct|ord|pow|print|qsort|range|s?rand|repr|round|setattr|sizeof|sorted|sum|system|vars|zip)\b
      scope: support.function.builtin.cython
  builtin_types:
    - match: (?<!\.)\b(basestring|bool|buffer|bytearray|bytes|classmethod|complex|dict|enumerate|file|frozenset|list|memoryview|object|open|property|reversed|set|slice|staticmethod|str|super|tuple|type)\b
      scope: support.type.cython
  c_types:
    - match: (?<!\.)\b(bint|(long\s)?double|enum|float|struct|union|void|const|fused|((un)?signed\s)?(char|((short|long(\slong)?)\s)?int|short|long(\slong)?))\b
      scope: support.type.c_types.cython
  class_entity_name:
    - match: '(?=[a-zA-Z_]\w*)'
      push:
        - meta_content_scope: entity.name.type.class.cython
        - match: (?!\w)
          pop: true
        - include: entity_name_class
  class_inheritance:
    - match: \(
      push:
        - meta_content_scope: meta.class.inheritance.cython
        - match: '\)|:'
          pop: true
        - match: (?<=\(|,)\s*
          push:
            - meta_content_scope: entity.other.inherited-class.cython
            - match: \s*(?:,|(?=\)))
              captures:
                1: punctuation.separator.inheritance.cython
              pop: true
            - include: main
  comment_extended_fmt:
    - match: (?i)(#(#|\s)*syntax:fmt)$
      captures:
        1: comment.line.hashmark.extended.fmt.open.cython
      push:
        - meta_scope: meta.syntax.comment.line.hashmark.extended.fmt.cython
        - match: (?i)(#(#|\s)*end:fmt)$
          captures:
            1: comment.line.hashmark.extended.fmt.close.cython
          pop: true
        - include: string_quoted_format
        - include: main
  comment_extended_old:
    - match: (?i)(#(#|\s)*syntax:old)$
      captures:
        1: comment.line.hashmark.extended.fmt.open.cython
      push:
        - meta_scope: meta.syntax.comment.line.hashmark.extended.fmt.cython
        - match: (?i)(#(#|\s)*end:old)$
          captures:
            1: comment.line.hashmark.extended.fmt.close.cython
          pop: true
        - include: string_quoted_old
        - include: main
  comment_extended_re:
    - match: (?i)(#(#|\s)*syntax:re)$
      captures:
        1: comment.line.hashmark.extended.re.open.cython
      push:
        - meta_scope: meta.syntax.comment.line.hashmark.extended.re.cython
        - match: (?i)(#(#|\s)*end:re)$
          captures:
            1: comment.line.hashmark.extended.re.close.cython
          pop: true
        - include: string_quoted_regex
        - include: main
  comment_extended_tmp:
    - match: (?i)(#(#|\s)*syntax:tmp)$
      captures:
        1: comment.line.hashmark.extended.tmp.open.cython
      push:
        - meta_scope: meta.syntax.comment.line.hashmark.extended.tmp.cython
        - match: (?i)(#(#|\s)*end:tmp)$
          captures:
            1: comment.line.hashmark.extended.tmp.close.cython
          pop: true
        - include: string_quoted_template
        - include: main
  constant_placeholder:
    - match: '%(\(\w+\))?#?0?-?[ ]?\+?(\d*|\*)(\.(\d*|\*))?[hlL]?[diouxXeEfFgGcrs%]'
      scope: string.interpolated.placeholder.cython
  entity_name_class:
    - include: illegal_names
    - include: generic_names
  entity_name_function:
    - include: magic_function_names
    - include: illegal_names
    - include: generic_names
  escaped_characters:
    - match: '\\(x\h{2}|[0-7]{3}|\n|\"|\''|a|b|f|n|r|t|v|\\)'
      scope: constant.character.escaped.special.cython
  escaped_characters_raw:
    - match: \\(\'|")
      scope: constant.character.escaped.raw.special.cython
  escaped_unicode_characters:
    - match: '\\(u\h{4}|U\h{8}|N\{[a-zA-Z\s]+\})'
      scope: constant.character.escaped.cython
  f_string_quoted:
    - match: '([fF])'''''''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.block.fmt.cython
        - match: "'''"
          pop: true
        - include: string_patterns
        - include: format_specifier_extended
    - match: '([rR][fF]|[fF][rR])'''''''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.block.fmt.cython
        - match: "'''"
          pop: true
        - include: escaped_characters_raw
        - include: format_specifier_extended
    - match: '([fF])'''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.line.fmt.cython
        - match: '''|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: string_patterns
        - include: format_specifier_extended
    - match: '([rR][fF]|[fF][rR])'''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.line.fmt.cython
        - match: '''|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: escaped_characters_raw
        - include: format_specifier_extended
    - match: '([fF])"""'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.block.fmt.cython
        - match: '"""'
          pop: true
        - include: string_patterns
        - include: format_specifier_extended
    - match: '([rR][fF]|[fF][rR])"""'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.block.fmt.cython
        - match: '"""'
          pop: true
        - include: escaped_characters_raw
        - include: format_specifier_extended
    - match: '([fF])"'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.line.fmt.cython
        - match: '"|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: string_patterns
        - include: format_specifier_extended
    - match: '([rR][fF]|[fF][rR])"'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.line.fmt.cython
        - match: '"|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: escaped_characters_raw
        - include: format_specifier_extended
  format_escape:
    - match: '({{|}})'
      scope: constant.character.escape.fmt.cython
  format_specifier:
    - include: format_escape
    - match: '({)(\w*(\.\w+)*)?(!(a|r|s))?'
      captures:
        1: string.interpolated.brace.fmt.cython
        2: variable.parameter.subscriptor.fmt.cython
        4: keyword.operator.exclamation.fmt.cython
        5: support.constant.ascii_repr_str.fmt.cython
      push:
        - meta_scope: meta.interpolated.format.string.cython
        - match: '(})'
          captures:
            1: string.interpolated.brace.fmt.cython
          pop: true
        - match: (:)
          captures:
            1: keyword.operator.colon.fmt.cython
          push:
            - meta_scope: meta.interpolated.format.specifier.cython
            - match: '(?=})'
              pop: true
            - include: format_specifier_fill_align
            - include: format_specifier_sign
            - include: format_specifier_alternate_form
            - include: format_specifier_zero_padding
            - include: format_specifier_width
            - include: format_specifier_thousand_separator
            - include: format_specifier_precision
            - include: format_specifier_type
            - include: format_specifier
        - include: format_specifier
  format_specifier_alternate_form:
    - match: (#)
      captures:
        1: support.constant.alternate.fmt.cython
      push:
        - meta_scope: meta.alternate.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_zero_padding
        - include: format_specifier_width
        - include: format_specifier_thousand_separator
        - include: format_specifier_precision
        - include: format_specifier_type
        - include: format_specifier
  format_specifier_extended:
    - include: format_escape
    - match: '({)'
      captures:
        1: string.interpolated.brace.fmt.cython
      push:
        - meta_scope: meta.interpolated.format.fstring.cython
        - match: '(})'
          captures:
            1: string.interpolated.brace.fmt.cython
          pop: true
        - include: format_specifier_extended_self
        - include: format_specifier_extended_ascii_repr_str
        - include: format_specifier_extended_colon
        - include: format_specifier_extended_fill_align
        - include: format_specifier_extended_sign
        - include: format_specifier_extended_alternate_form
        - include: format_specifier_extended_zero_padding
        - include: format_specifier_extended_width
        - include: format_specifier_extended_thousand_separator
        - include: format_specifier_extended_precision
        - include: format_specifier_extended_type
        - include: format_specifier_extended
  format_specifier_extended_alternate_form:
    - match: (#)
      captures:
        1: support.constant.alternate.fmt.cython
      push:
        - meta_scope: meta.alternate.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_extended_zero_padding
        - include: format_specifier_extended_width
        - include: format_specifier_extended_thousand_separator
        - include: format_specifier_extended_precision
        - include: format_specifier_extended_type
        - include: format_specifier_extended
  format_specifier_extended_ascii_repr_str:
    - match: (!(a|r|s))
      captures:
        1: keyword.operator.exclamation.fmt.cython
        2: support.constant.ascii_repr_str.fmt.cython
      push:
        - meta_scope: meta.ascii_repr_str.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_extended_colon
        - include: format_specifier_extended_fill_align
        - include: format_specifier_extended_sign
        - include: format_specifier_extended_alternate_form
        - include: format_specifier_extended_zero_padding
        - include: format_specifier_extended_width
        - include: format_specifier_extended_thousand_separator
        - include: format_specifier_extended_precision
        - include: format_specifier_extended_type
        - include: format_specifier_extended
  format_specifier_extended_colon:
    - match: (:)
      captures:
        1: keyword.operator.colon.fmt.cython
      push:
        - meta_scope: meta.colon.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_extended_fill_align
        - include: format_specifier_extended_sign
        - include: format_specifier_extended_alternate_form
        - include: format_specifier_extended_zero_padding
        - include: format_specifier_extended_width
        - include: format_specifier_extended_thousand_separator
        - include: format_specifier_extended_precision
        - include: format_specifier_extended_type
        - include: format_specifier_extended
  format_specifier_extended_fill_align:
    - match: '([^{}]?(<|>|=|\^))'
      captures:
        1: string.quoted.fill_char.fmt.cython
        2: keyword.operator.align.fmt.cython
      push:
        - meta_scope: meta.fill_char.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_extended_sign
        - include: format_specifier_extended_alternate_form
        - include: format_specifier_extended_zero_padding
        - include: format_specifier_extended_width
        - include: format_specifier_extended_thousand_separator
        - include: format_specifier_extended_precision
        - include: format_specifier_extended_type
        - include: format_specifier_extended
  format_specifier_extended_precision:
    - match: (\.\d+)
      captures:
        1: constant.character.precision.fmt.cython
      push:
        - meta_scope: meta.precision.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_extended_type
        - include: format_specifier_extended
  format_specifier_extended_self:
    - match: '(?<={)'
      push:
        - meta_scope: meta.self.cython
        - match: '(?=!|:|})'
          pop: true
        - include: main
  format_specifier_extended_sign:
    - match: (\+|-|\s)
      captures:
        1: keyword.operator.sign.fmt.cython
      push:
        - meta_scope: meta.sign.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_extended_alternate_form
        - include: format_specifier_extended_zero_padding
        - include: format_specifier_extended_width
        - include: format_specifier_extended_thousand_separator
        - include: format_specifier_extended_precision
        - include: format_specifier_extended_type
        - include: format_specifier_extended
  format_specifier_extended_thousand_separator:
    - match: (,)
      captures:
        1: keyword.operator.thousand_separator.fmt.cython
      push:
        - meta_scope: meta.thousand_separator.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_extended_precision
        - include: format_specifier_extended_type
        - include: format_specifier_extended
  format_specifier_extended_type:
    - match: (b|c|d|e|E|f|F|g|G|n|o|s|x|X|%)
      captures:
        1: constant.character.escape.type.fmt.cython
      push:
        - meta_scope: meta.type.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_extended
  format_specifier_extended_width:
    - match: (\d+)
      captures:
        1: constant.character.width.fmt.cython
      push:
        - meta_scope: meta.width.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_extended_thousand_separator
        - include: format_specifier_extended_precision
        - include: format_specifier_extended_type
        - include: format_specifier_extended
  format_specifier_extended_zero_padding:
    - match: (0)
      captures:
        1: constant.character.escape.zero_padding.fmt.cython
      push:
        - meta_scope: meta.zero_padding.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_extended_width
        - include: format_specifier_extended_thousand_separator
        - include: format_specifier_extended_precision
        - include: format_specifier_extended_type
        - include: format_specifier_extended
  format_specifier_fill_align:
    - match: '([^{}]?(<|>|=|\^))'
      captures:
        1: string.quoted.fill_char.fmt.cython
        2: keyword.operator.align.fmt.cython
      push:
        - meta_scope: meta.fill_char.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_sign
        - include: format_specifier_alternate_form
        - include: format_specifier_zero_padding
        - include: format_specifier_width
        - include: format_specifier_thousand_separator
        - include: format_specifier_precision
        - include: format_specifier_type
        - include: format_specifier
  format_specifier_precision:
    - match: (\.\d+)
      captures:
        1: constant.character.precision.fmt.cython
      push:
        - meta_scope: meta.precision.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_type
        - include: format_specifier
  format_specifier_sign:
    - match: (\+|-|\s)
      captures:
        1: keyword.operator.sign.fmt.cython
      push:
        - meta_scope: meta.sign.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_alternate_form
        - include: format_specifier_zero_padding
        - include: format_specifier_width
        - include: format_specifier_thousand_separator
        - include: format_specifier_precision
        - include: format_specifier_type
        - include: format_specifier
  format_specifier_thousand_separator:
    - match: (,)
      captures:
        1: keyword.operator.thousand_separator.fmt.cython
      push:
        - meta_scope: meta.thousand_separator.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_precision
        - include: format_specifier_type
        - include: format_specifier
  format_specifier_type:
    - match: (b|c|d|e|E|f|F|g|G|n|o|s|x|X|%)
      captures:
        1: constant.character.escape.type.fmt.cython
      push:
        - meta_scope: meta.type.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier
  format_specifier_width:
    - match: (\d+)
      captures:
        1: constant.character.width.fmt.cython
      push:
        - meta_scope: meta.width.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_thousand_separator
        - include: format_specifier_precision
        - include: format_specifier_type
        - include: format_specifier
  format_specifier_zero_padding:
    - match: (0)
      captures:
        1: constant.character.escape.zero_padding.fmt.cython
      push:
        - meta_scope: meta.zero_padding.fmt.cython
        - match: '(?=})'
          pop: true
        - include: format_specifier_width
        - include: format_specifier_thousand_separator
        - include: format_specifier_precision
        - include: format_specifier_type
        - include: format_specifier
  function_annotation:
    - match: (?<=\))\s*(->)\s*
      captures:
        1: keyword.operator.annotation.assignment.cython
      push:
        - match: (?=\s*:)
          pop: true
        - include: main
  function_arguments:
    - match: \(
      push:
        - match: (?=\))
          pop: true
        - include: comment
        - match: '\b([a-zA-Z_]\w*)\s*(=)'
          captures:
            1: variable.parameter.function.cython
            2: keyword.operator.assignment.cython
          push:
            - match: '(?=,|[\n)])'
              pop: true
            - match: (?<=(=))\s*
              captures:
                1: keyword.operator.assignment.cython
              push:
                - match: '(?=,|[\n)])'
                  pop: true
                - include: main
            - match: (?<=:)\s*
              push:
                - match: '(?=,|(=)|[\n)])'
                  captures:
                    1: keyword.operator.assignment.cython
                  pop: true
                - include: main
        - match: '\b([a-zA-Z_]\w*)\s*'
          captures:
            1: variable.parameter.function.cython
          push:
            - match: '(?=,|[\n)])'
              pop: true
            - match: (?<=:)\s*
              push:
                - match: '(?=,|[\n)])'
                  pop: true
                - include: main
  function_entity_name:
    - match: '(?=[a-zA-Z_]\w*)'
      push:
        - meta_content_scope: entity.name.function.cython
        - match: (?!\w)
          pop: true
        - include: entity_name_function
  generic_names:
    - match: '[a-zA-Z_]\w*'
  illegal_names:
    - match: \b(and|api|as|assert|break|by|class|continue|(c(p|type)?)?def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|public|raise|return|try|while|with|yield)\b
      scope: invalid.illegal_names.name.cython
  keyword_arguments:
    - match: '\b([a-zA-Z_]\w*)\s*(=)(?!=)'
      captures:
        1: variable.parameter.function.cython
        2: keyword.operator.assignment.cython
      push:
        - match: '(?=,|[\n)])'
          pop: true
        - include: main
  language_variables:
    - match: (?<!\.)\b(self|cls)\b
      scope: variable.language.cython
  line_continuation:
    - match: (\\)(.*)$\n?
      captures:
        1: punctuation.separator.continuation.line.cython
        2: invalid.illegal.unexpected_text.cython
  magic_function_names:
    - match: \b__(abs|add|and|await|bool|bytes|call|ceil|complex|contains|copy|dealloc|deepcopy|del|delattr|delete|delitem|dir|div|divmod|a?enter|eq|a?exit|float|floor|floordiv|format|ge|get|getattr|getattribute|getinitargs|getitem|getnewargs|getstate|gt|hash|hex|iadd|iand|idiv|ifloordiv|ilshift|imul|index|c?init|instancecheck|int|invert|ior|ipow|irshift|isub|a?iter|itruediv|ixor|le|len|lshift|lt|metaclass|missing|mod|mul|ne|neg|new|a?next|oct|or|pos|pow|prepare|radd|rand|rdiv|rdivmod|reduce|reduce_ex|repr|reversed|rfloordiv|rlshift|rmod|rmul|ror|round|rpow|rrshift|rshift|rsub|rtruediv|rxor|set|setattr|setitem|setstate|signatures|str|sub|subclasscheck|subclasshook|truediv|trunc|unicode|weakref|xor)__\b
      scope: support.function.magic.cython
  magic_variable_names:
    - match: \b__(all|annotations|bases|builtins|class|debug|dict|doc|file|members|metaclass|mro|name|qualname|slots|weakref)__\b
      scope: support.variable.magic.cython
  r_string_quoted:
    - match: '([rR][bB]?|[bB][rR])'''''''
      captures:
        1: storage.type.string.prefix.cython
      push:
        - meta_scope: string.quoted.single.block.cython
        - match: "'''"
          pop: true
        - include: escaped_characters_raw
    - match: '([rR][bB]?|[bB][rR])'''
      captures:
        1: storage.type.string.prefix.cython
      push:
        - meta_scope: string.quoted.single.line.cython
        - match: '''|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.cython
          pop: true
        - include: escaped_characters_raw
    - match: '([rR][bB]?|[bB][rR])"""'
      captures:
        1: storage.type.string.prefix.cython
      push:
        - meta_scope: string.quoted.double.block.cython
        - match: '"""'
          pop: true
        - include: escaped_characters_raw
    - match: '([rR][bB]?|[bB][rR])"'
      captures:
        1: storage.type.string.prefix.cython
      push:
        - meta_scope: string.quoted.double.line.cython
        - match: '"|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.cython
          pop: true
        - include: escaped_characters_raw
  regular_expressions:
    - match: '(?<=\()\?(=|!|<=|<!|:|P<[a-zA-Z_]\w*?>|\(([1-9]\d?|[a-zA-Z_]\w*)\))'
      scope: constant.character.escape.cython
    - match: '\((\?P=)([a-zA-Z_]\w*)\)'
      scope: keyword.other.group_reference_name.regex.cython
      captures:
        1: constant.character.escape.cython
    - match: '(\\g)<([a-zA-Z_]\w*|[1-9]\d*)>'
      scope: keyword.other.group_reference_name.regex.cython
      captures:
        1: constant.character.escape.cython
    - match: '\\[bBAZzG]|\^|\$'
      scope: keyword.control.anchor.regex.cython
    - match: '\\[1-9]\d*'
      scope: keyword.other.group_reference_order.regex.cython
    - match: '[?+*][?+]?|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??'
      scope: keyword.operator.quantifier.regex.cython
    - match: \|
      scope: keyword.operator.or.regex.cython
    - match: '\(\?#'
      push:
        - meta_scope: comment.block.regex.cython
        - match: \)
          pop: true
    - match: '\(\?[aiLmsux]+\)'
      scope: keyword.other.option_toggle.regex.cython
    - include: regular_expressions_escaped_characters
    - include: regular_expressions_character_classes
    - match: '[()]'
      scope: keyword.operator.group.regex.cython
  regular_expressions_character_classes:
    - match: '\\[wWsSdD]|\.'
      scope: constant.character.character_class.regex.cython
    - match: '\[(\^)?(\](?=.*\]))?'
      captures:
        1: keyword.operator.negation.regex.cython
      push:
        - meta_scope: constant.other.character_class.set.regex.cython
        - match: '\]'
          pop: true
        - match: '\[|\\\\|\\\]'
          scope: constant.character.escaped.special.regex.except.cython
        - include: regular_expressions_character_classes
        - include: regular_expressions_escaped_characters
  regular_expressions_escaped_characters:
    - match: '\\(\\|\?|\.|\*|\+|\{|\}|\||\(|\)|\[|\]|\^|\$)'
      scope: constant.character.escaped.special.regex.cython
  string_patterns:
    - include: escaped_characters
    - include: escaped_unicode_characters
  string_quoted:
    - match: '([bBuU]?)'''''''
      captures:
        1: storage.type.string.prefix.cython
      push:
        - meta_scope: string.quoted.single.block.cython
        - match: "'''"
          pop: true
        - include: string_patterns
    - match: '([bBuU]?)'''
      captures:
        1: storage.type.string.prefix.cython
      push:
        - meta_scope: string.quoted.single.line.cython
        - match: '''|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.cython
          pop: true
        - include: string_patterns
    - match: '([bBuU]?)"""'
      captures:
        1: storage.type.string.prefix.cython
      push:
        - meta_scope: string.quoted.double.block.cython
        - match: '"""'
          pop: true
        - include: string_patterns
    - match: '([bBuU]?)"'
      captures:
        1: storage.type.string.prefix.cython
      push:
        - meta_scope: string.quoted.double.line.cython
        - match: '"|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.cython
          pop: true
        - include: string_patterns
  string_quoted_format:
    - match: '([uUbB]?)'''''''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.block.fmt.cython
        - match: "'''"
          pop: true
        - include: string_patterns
        - include: format_specifier
    - match: '([rR][bB]?|[bB][rR])'''''''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.block.fmt.cython
        - match: "'''"
          pop: true
        - include: escaped_characters_raw
        - include: format_specifier
    - match: '([uUbB]?)'''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.line.fmt.cython
        - match: '''|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: string_patterns
        - include: format_specifier
    - match: '([rR][bB]?|[bB][rR])'''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.line.fmt.cython
        - match: '''|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: escaped_characters_raw
        - include: format_specifier
    - match: '([uUbB]?)"""'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.block.fmt.cython
        - match: '"""'
          pop: true
        - include: string_patterns
        - include: format_specifier
    - match: '([rR][bB]?|[bB][rR])"""'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.block.fmt.cython
        - match: '"""'
          pop: true
        - include: escaped_characters_raw
        - include: format_specifier
    - match: '([uUbB]?)"'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.line.fmt.cython
        - match: '"|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: string_patterns
        - include: format_specifier
    - match: '([rR][bB]?|[bB][rR])"'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.line.fmt.cython
        - match: '"|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: escaped_characters_raw
        - include: format_specifier
  string_quoted_old:
    - match: '([uUbB]?)'''''''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.block.fmt.cython
        - match: "'''"
          pop: true
        - include: string_patterns
        - include: constant_placeholder
    - match: '([rR][bB]?|[bB][rR])'''''''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.block.fmt.cython
        - match: "'''"
          pop: true
        - include: escaped_characters_raw
        - include: constant_placeholder
    - match: '([uUbB]?)'''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.line.fmt.cython
        - match: '''|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: string_patterns
        - include: constant_placeholder
    - match: '([rR][bB]?|[bB][rR])'''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.line.fmt.cython
        - match: '''|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: escaped_characters_raw
        - include: constant_placeholder
    - match: '([uUbB]?)"""'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.block.fmt.cython
        - match: '"""'
          pop: true
        - include: string_patterns
        - include: constant_placeholder
    - match: '([rR][bB]?|[bB][rR])"""'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.block.fmt.cython
        - match: '"""'
          pop: true
        - include: escaped_characters_raw
        - include: constant_placeholder
    - match: '([uUbB]?)"'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.line.fmt.cython
        - match: '"|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: string_patterns
        - include: constant_placeholder
    - match: '([rR][bB]?|[bB][rR])"'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.line.fmt.cython
        - match: '"|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: escaped_characters_raw
        - include: constant_placeholder
  string_quoted_regex:
    - match: '([rR][bB]?|[bB][rR])'''''''
      captures:
        1: storage.type.string.prefix.re.cython
      push:
        - meta_scope: string.quoted.single.block.re.cython
        - match: "'''"
          pop: true
        - include: string_patterns
        - include: regular_expressions
        - include: comment
    - match: '([rR][bB]?|[bB][rR])'''
      captures:
        1: storage.type.string.prefix.re.cython
      push:
        - meta_scope: string.quoted.single.line.re.cython
        - match: '''|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.re.cython
          pop: true
        - include: string_patterns
        - include: regular_expressions
    - match: '([rR][bB]?|[bB][rR])"""'
      captures:
        1: storage.type.string.prefix.re.cython
      push:
        - meta_scope: string.quoted.double.block.re.cython
        - match: '"""'
          pop: true
        - include: string_patterns
        - include: regular_expressions
        - include: comment
    - match: '([rR][bB]?|[bB][rR])"'
      captures:
        1: storage.type.string.prefix.re.cython
      push:
        - meta_scope: string.quoted.double.line.re.cython
        - match: '"|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.re.cython
          pop: true
        - include: string_patterns
        - include: regular_expressions
  string_quoted_template:
    - match: '([uUbB]?)'''''''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.block.fmt.cython
        - match: "'''"
          pop: true
        - include: string_patterns
        - include: template_string
    - match: '([rR][bB]?|[bB][rR])'''''''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.block.fmt.cython
        - match: "'''"
          pop: true
        - include: escaped_characters_raw
        - include: template_string
    - match: '([uUbB]?)'''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.line.fmt.cython
        - match: '''|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: string_patterns
        - include: template_string
    - match: '([rR][bB]?|[bB][rR])'''
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.single.line.fmt.cython
        - match: '''|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: escaped_characters_raw
        - include: template_string
    - match: '([uUbB]?)"""'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.block.fmt.cython
        - match: '"""'
          pop: true
        - include: string_patterns
        - include: template_string
    - match: '([rR][bB]?|[bB][rR])"""'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.block.fmt.cython
        - match: '"""'
          pop: true
        - include: escaped_characters_raw
        - include: template_string
    - match: '([uUbB]?)"'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.line.fmt.cython
        - match: '"|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: string_patterns
        - include: template_string
    - match: '([rR][bB]?|[bB][rR])"'
      captures:
        1: storage.type.string.prefix.fmt.cython
      push:
        - meta_scope: string.quoted.double.line.fmt.cython
        - match: '"|(\n)'
          captures:
            1: invalid.illegal.unclosed_string.fmt.cython
          pop: true
        - include: escaped_characters_raw
        - include: template_string
  template_string:
    - match: '\$(\$|[a-zA-Z_]\w*|{[a-zA-Z_]\w*})'
      scope: string.interpolated.template.cython
